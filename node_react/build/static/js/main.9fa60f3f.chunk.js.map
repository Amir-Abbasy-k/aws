{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getClients","_","state","member","fetch","then","response","json","setState","users","data","catch","err","console","error","createNewUser","username","pass","alert","usernameHandler","event","target","value","passwordHandler","render_","id","key","this","className","map","type","onChange","ref","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8HCiF5BC,G,8DA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,WAAa,SAAAC,GACM,EAAKC,MAAfC,OACPC,MAAM,kCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAAS,CAACC,MAAOH,EAASI,UAChDC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OA5BX,EAgCnBG,cAAgB,SAAAd,GAAK,IAAD,EACO,EAAKC,MAAvBc,EADW,EACXA,SAAUC,EADC,EACDA,KACjBb,MAAM,0CAAD,OAA2CY,EAA3C,iBAA4DC,IACjEC,MAAM,4BACN,EAAKlB,cApCY,EAuCnBmB,gBAAkB,SAACC,GACjB,EAAKZ,SAAS,CAACQ,SAAUI,EAAMC,OAAOC,SAxCrB,EA0CnBC,gBAAkB,SAACH,GACjB,EAAKZ,SAAS,CAACS,KAAMG,EAAMC,OAAOC,SA3CjB,EAgDrBE,QAAU,YAA2B,IAAzBC,EAAwB,EAAxBA,GAAIT,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAAY,OAAO,wBAAIS,IAAKD,GAAKT,EAAd,UAA+BC,IA9CxE,EAAKf,MAAQ,CACXc,SAAU,GACVC,KAAM,GACNR,MAAO,IALQ,E,gEAiBjBkB,KAAK3B,e,+BAiCG,IACDS,EAASkB,KAAKzB,MAAdO,MACP,OACE,yBAAKmB,UAAU,OACb,gDACA,4BACHnB,EAAMoB,IAAIF,KAAKH,UAGZ,2BACAM,KAAK,OACLC,SAAUJ,KAAKR,kBAEf,2BACAa,IAAI,WACJD,SAAUJ,KAAKJ,kBAGf,4BAAQU,QAASN,KAAKZ,eAAtB,YAEA,2BAAIY,KAAKzB,MAAMc,e,GAvELkB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoC,c","file":"static/js/main.9fa60f3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      username: '',\n      pass: '',\n      users: [],\n  };\n}\n \n\n\n  componentDidMount() {\n    //fetch('/api/hello')\n    //.then(response => response.json())\n    //.then(users => this.setState({users: users.data}))\n    //.catch(err => console.error(err))\n\n    this.getClients()\n\n  }\n\n\n  \n  getClients = _ => {\n    const {member} = this.state;\n    fetch(`http://localhost:5000/getusers`)\n    .then(response => response.json())\n    .then(response => this.setState({users: response.data}))\n    .catch(err => console.error(err))\n  }\n\n\n  createNewUser = _ =>{\n    const {username, pass} = this.state\n    fetch(`http://localhost:5000/addUser?username=${username}&pass=${pass}`) \n    alert('User successfully added!');\n    this.getClients()\n  }\n\n  usernameHandler = (event) => {\n    this.setState({username: event.target.value});\n  }\n  passwordHandler = (event) => {\n    this.setState({pass: event.target.value});\n  }\n\n\n\nrender_ = ({id, username, pass}) => { return <li key={id}>{username} pass ={pass}</li>}\n\n  render() {\n    const {users} = this.state;\n    return (\n      <div className=\"App\">\n        <h2>Call out to API!</h2>\n        <ul>\n    {users.map(this.render_)}\n        </ul>\n\n        <input\n        type='text'\n        onChange={this.usernameHandler}\n      />\n        <input\n        ref=\"password\"\n        onChange={this.passwordHandler}\n        />\n\n        <button onClick={this.createNewUser}>Add User</button>\n\n        <p>{this.state.username}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}